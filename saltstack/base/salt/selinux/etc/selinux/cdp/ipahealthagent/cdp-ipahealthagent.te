policy_module(cdp-ipahealthagent, 1.0.0)

gen_require(`
    type var_log_t;
    type tmp_t;
    type default_t;
    type devlog_t;
    type httpd_config_t;
    type kernel_t;
    type krb5_keytab_t;
    type node_t;
    type syslogd_var_run_t;
')

type cdp_ipahealthagent_t;
type cdp_ipahealthagent_exec_t;
type cdp_ipahealthagent_cert_t;

# Declare the custom port type
type cdp_ipahealthagent_port_t;
corenet_port(cdp_ipahealthagent_port_t)

# Create daemon domain
init_daemon_domain(cdp_ipahealthagent_t, cdp_ipahealthagent_exec_t)

type_transition init_t cdp_ipahealthagent_exec_t:process cdp_ipahealthagent_t;
allow init_t cdp_ipahealthagent_exec_t:file { read open execute map };

# Execute standard binaries and shells
corecmd_exec_bin(cdp_ipahealthagent_t)
corecmd_exec_shell(cdp_ipahealthagent_t)
files_exec_usr_files(cdp_ipahealthagent_t)

# Logging
logging_log_filetrans(cdp_ipahealthagent_t, var_log_t, file)
logging_log_filewrite(cdp_ipahealthagent_t)
logging_search_logs(cdp_ipahealthagent_t)

# IPA certs access
files_search_var_lib(cdp_ipahealthagent_t)
files_read_var_lib_files(cdp_ipahealthagent_t)

# Agent’s own certs
allow cdp_ipahealthagent_t cdp_ipahealthagent_cert_t:file { read getattr open }

# Read /etc/passwd
files_read_etc_files(cdp_ipahealthagent_t)

# Temp file handling
files_tmp_filetrans(cdp_ipahealthagent_t, tmp_t, file)
files_manage_tmp_files(cdp_ipahealthagent_t)
files_manage_tmp_dirs(cdp_ipahealthagent_t)

# Socket permissions
corenet_all_recvfrom_unlabeled(cdp_ipahealthagent_t)
corenet_all_recvfrom_netlabel(cdp_ipahealthagent_t)
corenet_tcp_bind_generic_port(cdp_ipahealthagent_t)
corenet_tcp_bind_kerberos_port(cdp_ipahealthagent_t)
corenet_tcp_connect_http_port(cdp_ipahealthagent_t)
corenet_tcp_connect_kerberos_port(cdp_ipahealthagent_t)
corenet_tcp_connect_ldap_port(cdp_ipahealthagent_t)
corenet_tcp_bind_all_nodes(cdp_ipahealthagent_t)
corenet_udp_bind_all_nodes(cdp_ipahealthagent_t)
corenet_udp_bind_generic_port(cdp_ipahealthagent_t)

# Allow binding to custom port
corenet_tcp_bind_generic_port(cdp_ipahealthagent_t)
allow cdp_ipahealthagent_t cdp_ipahealthagent_port_t:tcp_socket name_bind;

# Misc file access
files_exec_etc_files(cdp_ipahealthagent_t)
libs_exec_ld_so(cdp_ipahealthagent_t)
libs_use_ldconfig(cdp_ipahealthagent_t)
miscfiles_read_certs(cdp_ipahealthagent_t)

# Keytabs and krb conf
auth_use_kerberos(cdp_ipahealthagent_t)

# Net config
files_read_net_conf_files(cdp_ipahealthagent_t)

# SSSD access
sss_read_public_files(cdp_ipahealthagent_t)
sss_read_var_lib_files(cdp_ipahealthagent_t)

# System logs
logging_search_logs(cdp_ipahealthagent_t)
logging_read_generic_logs(cdp_ipahealthagent_t)

# Write to /dev/log
logging_send_syslog_msg(cdp_ipahealthagent_t)

# Allow access to proc/net
kernel_read_net_sysctls(cdp_ipahealthagent_t)

# Filesystem labeling
files_associate(cdp_ipahealthagent_t)

# Self perms
allow cdp_ipahealthagent_t self:tcp_socket create_stream_socket_perms;
allow cdp_ipahealthagent_t self:dir { add_name create remove_name write };
allow cdp_ipahealthagent_t self:file { execute map rename unlink };

# Interfaces not available — keep raw allows
allow cdp_ipahealthagent_t default_t:file ioctl;
allow cdp_ipahealthagent_t devlog_t:lnk_file read;
allow cdp_ipahealthagent_t devlog_t:sock_file write;
allow cdp_ipahealthagent_t httpd_config_t:dir search;
allow cdp_ipahealthagent_t kernel_t:unix_dgram_socket sendto;
allow cdp_ipahealthagent_t krb5_keytab_t:file { lock open read };
allow cdp_ipahealthagent_t node_t:tcp_socket node_bind;
allow cdp_ipahealthagent_t node_t:udp_socket node_bind;
allow cdp_ipahealthagent_t self:netlink_route_socket { bind create getattr nlmsg_read };
allow cdp_ipahealthagent_t self:udp_socket { bind connect create getattr getopt setopt };
allow cdp_ipahealthagent_t self:unix_dgram_socket { connect create };
allow cdp_ipahealthagent_t syslogd_var_run_t:dir search;
allow cdp_ipahealthagent_t tmp_t:file setattr;
allow cdp_ipahealthagent_t self:netlink_tcpdiag_socket { create setopt bind getattr };